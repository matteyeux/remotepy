#!/usr/bin/env python3
import os
import sys
import sqlite3
import subprocess

def spawn_ssh(user, host, port=22):
	# https://bugs.python.org/issue/8557
	if sys.platform == "win32":
		system32 = os.path.join(os.environ['SystemRoot'], 'SysNative')
		ssh_path = os.path.join(system32, 'OpenSSH/ssh.exe')
	else :
		ssh_path = "ssh"
	p = subprocess.call([ssh_path, user + "@" + host, "-p", str(port)])

def ping_host(host):
	FNULL = open(os.devnull, 'w')
	p = subprocess.Popen(['fping', '-c', '1', '-t', '250', host], stdout=FNULL, stderr=FNULL)
	stream = p.communicate()[0]
	ret = p.returncode

	print('status : ', end='')
	if ret == 0:
		print("up")
	else :
		print("down")


def create_sqlite3_db(db_name):
	conn = sqlite3.connect(db_name)
	c = conn.cursor()
	c.execute('''CREATE TABLE devices (device text, user text, ip text, port int)''')
	conn.commit()
	conn.close()

def update_sqlite3_db(db_name, sqlite3_data):
	conn = sqlite3.connect(db_name)
	c = conn.cursor()
	sqlite3_cmd = ("INSERT INTO devices VALUES ('{0}','{1}','{2}', '{3}')".format(data[0], data[1], data[2], data[3]))
	c.execute(sqlite3_cmd)
	conn.commit()
	conn.close()

def delete_device(db_name, device_name):
	conn = sqlite3.connect(db_name)
	c = conn.cursor()
	sqlite3_cmd = ("DELETE FROM devices WHERE device='{0}'".format(device_name))
	c.execute(sqlite3_cmd)
	conn.commit()
	conn.close()

def read_sqlite3_db(db_name, device_name=None):

	if os.path.exists(db_name) is False :
		print("[error] %s : not found" % db_name)
		sys.exit(1)

	conn = sqlite3.connect(db_name)
	c = conn.cursor()
	user = None
	ip = None
	port = 0
	if device_name is None:
		cmd = c.execute("SELECT * FROM devices ORDER BY device COLLATE NOCASE ASC")
		for row in cmd:
			print("===============")
			print("name   : %s" % row[0])
			print("user   : %s" % row[1])
			print("ip     : %s" % row[2])
			print("port   : %s" % row[3])
			if os.path.isfile("/usr/bin/fping"):
				ping_host(row[2])
		print("===============")
		conn.close()
	else :
		cmd = c.execute("SELECT * FROM devices WHERE device='{0}'".format(device_name))
		for row in cmd:
			user = row[1]
			ip = row[2]
			port = row[3]
		conn.close()
		return user, ip, port

def update_device(db_name, device_name, comp, value):
	if os.path.exists(db_name) is False :
		print("[ERROR] %s not found, you can't update %s" % (db_name, device_name))
		sys.exit(1)

	device = read_sqlite3_db(sqlite3_db, argv[2])
	if device[0] is not None:
		conn = sqlite3.connect(db_name)
		c = conn.cursor()
		sqlite3_cmd = ("UPDATE devices SET {0}='{1}' WHERE device='{2}'".format(comp, value, device_name))
		c.execute(sqlite3_cmd)
		conn.commit()
		conn.close()
	else :
		print("[ERROR] device %s does not exist" % device_name)


def usage(pyname):
	print("usage : %s [args]" % pyname)
	print(" -a, --add <device|user|ip|port>\tadd device to list")
	print(" -u, --update <device|component|value>\tupdate device settings")
	print(" -c, --connect [device]\t\t\tconnect to device")
	print(" -d, --delete [device]\t\t\tdelete device from list")
	print(" -l, --list\t\t\t\tlist devices")

if __name__ == '__main__':

	add = False
	list_dev = False
	connect_dev = False
	delete_dev = False
	update_dev = False

	argv = sys.argv
	argc = len(argv)

	data = list()
	data_names = ["device", "user", "ip", "port"]

	if argc == 1:
		usage(argv[0])
	for i in range(0, argc):
		if argv[i] == "-a" or argv[i] == "--add":
			if argc != 6 and argc != 2:
				print("missing args")
				usage(argv[0])
				sys.exit(-1)

			# if user does not put any value as arg
			# we ask for input
			if argc == 2:
				for j in range(0, 4):
					value = input("%s : " % data_names[j])
					data.append(value)
			if argc == 6:
				for j in range(2, 6):
					data.append(argv[j])

			add = True
		elif argv[i] == "-u" or argv[i] == "--update":
			if argc != 5:
				print("missing args")
				usage(argv[0])
				sys.exit(-1)
			update_dev = True
		elif argv[i] == "-c" or argv[i] == "--connect":
			device = argv[i + 1]
			print("connecting to device : %s" % device)
			connect_dev = True
		elif argv[i] == "-l" or argv[i] == "--list":
			list_dev = True
		elif argv[i] == "-d" or argv[i] == "--delete":
			device = argv[i + 1]
			delete_dev = True
		elif argv[i] == "-h" or argv[i] == "--help":
			usage(argv[0])

	if sys.platform == "win32":
		sqlite3_db = os.environ['HOMEPATH'] + "/remotepy.db"
	else:
		sqlite3_db = os.environ['HOME'] + "/remotepy.db"

	if add is True:
		if not os.path.isfile(sqlite3_db):
			create_sqlite3_db(sqlite3_db)
			update_sqlite3_db(sqlite3_db, data)
		else:
			if read_sqlite3_db(sqlite3_db, device_name=data[0])[0] != None:
				print("[ERROR] a device with name \"%s\" already exists" % data[0])
			else :
				update_sqlite3_db(sqlite3_db, data)

	if update_dev is True:
		update_device(sqlite3_db, argv[2], argv[3], argv[4])

	if list_dev is True:
		if argc == 3:
			device = read_sqlite3_db(sqlite3_db, argv[2])
			if device[0] is not None:
				print("===============")
				print("name : %s" % argv[2])
				print("user : %s" % device[0])
				print("ip   : %s" % device[1])
				print("port : %s" % device[2])
				print("===============")
		else:
			read_sqlite3_db(sqlite3_db)

	if connect_dev is True:
		user, ip, port = read_sqlite3_db(sqlite3_db, device_name=device)

		if user is None:
			print("[ERROR] device not found")
		else :
			spawn_ssh(user, ip, port)

	if delete_dev is True :
		if read_sqlite3_db(sqlite3_db, device_name=device)[0] == None:
			print("[ERROR] device with name \"%s\" does not exist" % device)
		else :
			delete_device(sqlite3_db, device)
			print("[INFO] deleted \"%s\"" % device)
